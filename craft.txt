function intfMethod(AMethod, AEvent) {
	if (!AMethod) { return false; }
	var xParams="";
	if (AMethod.indexOf("(")>=0) {
		AMethod=AMethod.replace(/\)/, "");
		var xArr=AMethod.split("(");
		AMethod=xArr[0];
		xParams=xArr[1];
	}
	if (functionExists(AMethod)) {
		if (xParams!="") {
			eval("var xP=" + xParams);
			for (var key in xP) { AEvent[key]=xP[key]; }
		}
		var xFunc=AMethod + "(AEvent);";
		
		if( AMethod == "wnd.Create" && AEvent.wndType == "modaldialog" ) 
			if( AEvent.id.indexOf( 'wnd_dialog' ) > -1 ) 
				return;

		return eval(xFunc);
	} else {
		alert("Error: Method \"" + AMethod + "\" doesn't exist");
		return null;
	}
}


function Cmd(AData) {
	if ((P) && (P["globmode"]) && ((P["globmode"]=="trade") || (P["globmode"]=="craft") || (P["globmode"]=="xchg"))) {
		if ((AData.indexOf("bwalk")==0) || (AData.indexOf("l")==0)) {
			dbgErrCnt++;
			loc.EndTurn();
			return;
		}
	}

	if ((Socket) && (SocketConnected)) {
		LASTCMDTIME=time();
		Socket.write(AData + "\n");
	} else { statusEvent({"ERROR": "Not connected"}); }



	console.log( AData );
	var c = AData.split( '&' );
	if( c[ 0 ] == "tccheck" ) {
		setTimeout( craft_finish, 1000 );
	}
}

var recipe_id = craft.CurrentRecipe( );
var book_id = 3651 + P.profid;

Cmd( "tcselrcp&" + recipe_id + "&0" );
var recipe = Recipes[ P.profid ][ recipe_id ];

var ut = recipe.ut;
var components = recipe.raw;
var tool = recipe.tool;
var result_id = recipe.obj;
var items = [];
var ut_id = 0;
var total_prod = 0;
var cat = recipe.cat;

for( var i in M ) {
	if( M[ i ].iid == ut ) {
		ut_id = M[ i ].tid;
		break;
	}
}

function clear_items( ) {
	
}

function fetch_items( ) {
	items = [];

	for( var i in T ) {
		if( T[ i ].slotcls == ut_id ) {
			items.push( T[ i ].rid );
		}
	}

	return items;
}

function find_item_id( s, sid ) {
	for( var i in T ) {
		if( T[ i ].slotcls == s && T[ i ].rid == sid ) {
			return T[ i ];
		}
	}
}

function addchat( s ) {
	chatlog.Add( { "id": "chat_sys_log", "data": s } );	
}

function find_ut( ) {
	for( var i in M ) {
		if( M[ i ].rid == ut ) {
			return M[ i ];
		}	
	}
}

function do_craft( ) {
	fetch_items( );

	if( items.indexOf( book_id ) == -1 ) {
		var b = find_item_id( 'bag', book_id );
		Cmd( "tmov&bag&" + b.slotid + "&" + b.id +"&"+ ut_id +"&0&0&1" ); // move book
	}

	// move items
	var slot = 1;
	for( var cid in components ) {
		qty = components[ cid ];
		var b = find_item_id( 'bag', cid );
		Cmd( "tmov&bag&" + b.slotid + "&" + b.id +"&"+ ut_id +"&"+ slot +"&0&" + qty ); // move item
		slot++;
	}

	//cat
	var b = find_item_id( 'bag', cat );
	if( b ) {
		if( b.quan > 1 ) {
			var qty = 2;
		} else {
			var qty = 1;
		}

		Cmd( "tmov&bag&" + b.slotid + "&" + b.id +"&"+ ut_id +"&"+ slot +"&0&" + qty ); // move cat
	}

	//do craft
	setTimeout( function( ) {
		var b = find_item_id( 'pers', tool );
		var u = find_ut( );
		Cmd( "tcstart&"+ u.x +"&"+ u.y +"&" + b.id );
	}, 1000 );
}

function craft_finish( ) {
	fetch_items( );

	var r = find_item_id( ut_id, result_id );
	if( r ) {
		total_prod += r.quan;
		Cmd( "tmov&"+ ut_id +"&1&"+ r.id +"&bag&124&0&" + r.quan ); // move res
		addchat( '+ ' + r.quan + ', '+ total_prod +' всего' );
	}

	repair.do_repair( );

	setTimeout( do_craft, 1000 );
}

do_craft(  );

var repair = {
	repair_durability_percent: 0.4, // процент поломки, ниже которого мы идём чиниться
	stop_repair: false,
	repair_cycle: false,

	find_item_id: function( s, sid ) {
		for( var i in T ) {
			if( T[ i ].slotcls == s && T[ i ].rid == sid ) {
				return T[ i ];
			}
		}

		return false;
	},

	find_repair_for: function( obj ) {
		var q = Objs[ obj ];

		var lvl = q.level;
		if( lvl <= 28 )			var i = 1;
		else if( lvl <= 58 )	var i = 2;
		else if( lvl <= 88 )	var i = 3;
		else if( lvl <= 118 )	var i = 4;
		else					var i = 5;

		if( q.cls == 'w' && ( q.subcls == 'f' || q.subcls == 'g' || q.subcls == 't' ) ) {
			var i = 1;
		}

		if( q.cls == 'd' ) {
			var id = 2735 + i;
		} else if( q.cls == 'w' ) {
			var id = 2740 + i;
		} else {
			return false;
		}

		return this.find_item_id( 'bag', id );
	},

	get_items: function( ) {
		var items = [ ];
		var cap = 0, maxcap = 0;
		for( var i in T ) {
			if( T[ i ].slotcls == "pers" ) {
				items.push( T[ i ] );
			}
		}

		return items;
	},

	check_durability: function( ) {
		var items = this.get_items( );
		var cap = 0, maxcap = 0;
		for( var i in items ) {
			if( items[ i ].cap && items[ i ].maxcap ) {
				cap += items[ i ].cap * 1;
				maxcap += items[ i ].maxcap * 1;
			}
		}

		if( maxcap == 0 ) {
			return 0;
		} else {
			return cap / maxcap;
		}
	},

	upgrade_items: function( ) {
		var upgrade = this.find_item_id( 'bag', 5057 );
		if( !upgrade ) return ;

		var items = this.get_items( );
		for( var i in items ) {
			var q = Objs[ items[ i ].rid ];
			if( q.cls == 'w' && ( q.subcls == 'f' || q.subcls == 'g' || q.subcls == 't' ) ) {
				Cmd( "tmov&bag&"+ upgrade.slotid +"&"+upgrade.id+"&pers&"+ items[ i ].slotid +"&" + items[ i ].id );
			}
		}
	},

	do_repair: function( ) {
		if( this.stop_repair ) return ;

		if( !this.repair_cycle ) {
			if( this.check_durability( ) && this.check_durability( ) > this.repair_durability_percent ) return ;

			addchat( Math.round( this.check_durability( ) * 100 ) + "% поломки. Включаем починку." );
		}

		var items = this.get_items( );	
		if( this.check_durability( ) < 1 ) {
			this.repair_cycle = true;
			setTimeout( function( ) {
				for( var i in items ) {
					if( items[ i ].cap == items[ i ].maxcap ) continue ;
					var rep = repair.find_repair_for( items[ i ].rid );
					if( !rep ) {
						addchat( "Нет ремонтов для "+ Objs[ items[ i ].rid ].name +". Автопочинка отключена." );
						repair.stop_repair = true;
						return ;
					}
					Cmd( "tmov&bag&"+ rep.slotid +"&"+rep.id+"&pers&"+ items[ i ].slotid +"&" + items[ i ].id );
				}

				repair.do_repair( );
			}, 200 );
		} else {
			this.upgrade_items( );
			this.repair_cycle = false;
		}
	}
};